// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace E.Service.Resource.Data.Models
{
    public partial class EservicesdbContext : DbContext
    {
        public EservicesdbContext()
        {
        }

        public EservicesdbContext(DbContextOptions<EservicesdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Actions> Actions { get; set; }
        public virtual DbSet<Actiontarget> Actiontarget { get; set; }
        public virtual DbSet<Actiontype> Actiontype { get; set; }
        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<Activitytarget> Activitytarget { get; set; }
        public virtual DbSet<Activitytype> Activitytype { get; set; }
        public virtual DbSet<AspNetGroups> AspNetGroups { get; set; }
        public virtual DbSet<AspNetRoleGroup> AspNetRoleGroup { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserGroup> AspNetUserGroup { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AssetBorrow> AssetBorrow { get; set; }
        public virtual DbSet<AssetBrandSeries> AssetBrandSeries { get; set; }
        public virtual DbSet<AssetBrands> AssetBrands { get; set; }
        public virtual DbSet<AssetMainGroupTypes> AssetMainGroupTypes { get; set; }
        public virtual DbSet<AssetRequestDetails> AssetRequestDetails { get; set; }
        public virtual DbSet<AssetRequests> AssetRequests { get; set; }
        public virtual DbSet<AssetSubGroupTypes> AssetSubGroupTypes { get; set; }
        public virtual DbSet<AssetTypes> AssetTypes { get; set; }
        public virtual DbSet<Assets> Assets { get; set; }
        public virtual DbSet<BorrowRequestDetails> BorrowRequestDetails { get; set; }
        public virtual DbSet<BorrowRequests> BorrowRequests { get; set; }
        public virtual DbSet<Budget> Budget { get; set; }
        public virtual DbSet<BudgetRole> BudgetRole { get; set; }
        public virtual DbSet<CarBudgetDetail> CarBudgetDetail { get; set; }
        public virtual DbSet<CarBudgetDetailStatus> CarBudgetDetailStatus { get; set; }
        public virtual DbSet<CarDrivers> CarDrivers { get; set; }
        public virtual DbSet<CarPools> CarPools { get; set; }
        public virtual DbSet<CarRequestBudget> CarRequestBudget { get; set; }
        public virtual DbSet<CarRequestCoordinate> CarRequestCoordinate { get; set; }
        public virtual DbSet<CarRequestCoordinateDetail> CarRequestCoordinateDetail { get; set; }
        public virtual DbSet<CarRequestCoordinateStatus> CarRequestCoordinateStatus { get; set; }
        public virtual DbSet<CarRequests> CarRequests { get; set; }
        public virtual DbSet<ChangeLog> ChangeLog { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Jabatan> Jabatan { get; set; }
        public virtual DbSet<JabatanChild> JabatanChild { get; set; }
        public virtual DbSet<Jenis> Jenis { get; set; }
        public virtual DbSet<JenisRole> JenisRole { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<MeetingBudget> MeetingBudget { get; set; }
        public virtual DbSet<MeetingRequestAccountability> MeetingRequestAccountability { get; set; }
        public virtual DbSet<MeetingRequestAccountabilityFiles> MeetingRequestAccountabilityFiles { get; set; }
        public virtual DbSet<MeetingRequestAccountabilityFlow> MeetingRequestAccountabilityFlow { get; set; }
        public virtual DbSet<MeetingRequestBudgets> MeetingRequestBudgets { get; set; }
        public virtual DbSet<MeetingRequestFlow> MeetingRequestFlow { get; set; }
        public virtual DbSet<MeetingRequestTime> MeetingRequestTime { get; set; }
        public virtual DbSet<MeetingRequests> MeetingRequests { get; set; }
        public virtual DbSet<MeetingRooms> MeetingRooms { get; set; }
        public virtual DbSet<MeetingRoomsCategory> MeetingRoomsCategory { get; set; }
        public virtual DbSet<MeetingTypes> MeetingTypes { get; set; }
        public virtual DbSet<OfficeLocationRegions> OfficeLocationRegions { get; set; }
        public virtual DbSet<OfficeLocationType> OfficeLocationType { get; set; }
        public virtual DbSet<OfficeLocations> OfficeLocations { get; set; }
        public virtual DbSet<OfficeRooms> OfficeRooms { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<OrderItemInventoryIt> OrderItemInventoryIt { get; set; }
        public virtual DbSet<OrderItemStock> OrderItemStock { get; set; }
        public virtual DbSet<OrderReload> OrderReload { get; set; }
        public virtual DbSet<OrderReloadAccountability> OrderReloadAccountability { get; set; }
        public virtual DbSet<OrderReloadAccountabilityImage> OrderReloadAccountabilityImage { get; set; }
        public virtual DbSet<OrderReloadDetail> OrderReloadDetail { get; set; }
        public virtual DbSet<OrderRequest> OrderRequest { get; set; }
        public virtual DbSet<OrderRequestAccountability> OrderRequestAccountability { get; set; }
        public virtual DbSet<OrderRequestAccountabilityImage> OrderRequestAccountabilityImage { get; set; }
        public virtual DbSet<OrderRequestImage> OrderRequestImage { get; set; }
        public virtual DbSet<OrderRequestsDetail> OrderRequestsDetail { get; set; }
        public virtual DbSet<Process> Process { get; set; }
        public virtual DbSet<Processadmin> Processadmin { get; set; }
        public virtual DbSet<RepairItem> RepairItem { get; set; }
        public virtual DbSet<RepairItemRequestAccountablitiyImage> RepairItemRequestAccountablitiyImage { get; set; }
        public virtual DbSet<RepairItemRequestAccountablity> RepairItemRequestAccountablity { get; set; }
        public virtual DbSet<RepairItemRequestImage> RepairItemRequestImage { get; set; }
        public virtual DbSet<RepairItemRequests> RepairItemRequests { get; set; }
        public virtual DbSet<RequestActionHistory> RequestActionHistory { get; set; }
        public virtual DbSet<RequestFlow> RequestFlow { get; set; }
        public virtual DbSet<RequestFlowUrl> RequestFlowUrl { get; set; }
        public virtual DbSet<Requestaction> Requestaction { get; set; }
        public virtual DbSet<Requestdata> Requestdata { get; set; }
        public virtual DbSet<Requestnote> Requestnote { get; set; }
        public virtual DbSet<Requeststakeholder> Requeststakeholder { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Statetype> Statetype { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StockTransaction> StockTransaction { get; set; }
        public virtual DbSet<StockTransactionStatus> StockTransactionStatus { get; set; }
        public virtual DbSet<Stocks> Stocks { get; set; }
        public virtual DbSet<Target> Target { get; set; }
        public virtual DbSet<TargetUser> TargetUser { get; set; }
        public virtual DbSet<Transition> Transition { get; set; }
        public virtual DbSet<Transitionaction> Transitionaction { get; set; }
        public virtual DbSet<TravelCities> TravelCities { get; set; }
        public virtual DbSet<TravelHotel> TravelHotel { get; set; }
        public virtual DbSet<TravelHotelRequests> TravelHotelRequests { get; set; }
        public virtual DbSet<TravelOutbondCategory> TravelOutbondCategory { get; set; }
        public virtual DbSet<TravelRequest> TravelRequest { get; set; }
        public virtual DbSet<TravelRequestAccountability> TravelRequestAccountability { get; set; }
        public virtual DbSet<TravelRequestAccountabilityFiles> TravelRequestAccountabilityFiles { get; set; }
        public virtual DbSet<TravelTransportationName> TravelTransportationName { get; set; }
        public virtual DbSet<TravelTransportationRequestDetails> TravelTransportationRequestDetails { get; set; }
        public virtual DbSet<TravelTransportationRequests> TravelTransportationRequests { get; set; }
        public virtual DbSet<TravelTransportationType> TravelTransportationType { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=eservicesdb;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Actions>(entity =>
            {
                entity.HasKey(e => e.Actionid)
                    .HasName("PK_smsaction");

                entity.ToTable("Actions", "WORKFLOW");

                entity.Property(e => e.Actionid)
                    .HasColumnName("actionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actiontypeid).HasColumnName("actiontypeid");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Actiontype)
                    .WithMany(p => p.Actions)
                    .HasForeignKey(d => d.Actiontypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smsaction_smsactiontype");
            });

            modelBuilder.Entity<Actiontarget>(entity =>
            {
                entity.ToTable("Actiontarget", "WORKFLOW");

                entity.Property(e => e.Actiontargetid).HasColumnName("actiontargetid");

                entity.Property(e => e.Actionid).HasColumnName("actionid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Roleid).HasColumnName("roleid");

                entity.Property(e => e.Targetid).HasColumnName("targetid");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.Actiontarget)
                    .HasForeignKey(d => d.Actionid)
                    .HasConstraintName("fk_smsactiongroup_smsaction");

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.Actiontarget)
                    .HasForeignKey(d => d.Targetid)
                    .HasConstraintName("fk_smsactiontarget_smstargetid");
            });

            modelBuilder.Entity<Actiontype>(entity =>
            {
                entity.ToTable("Actiontype", "WORKFLOW");

                entity.Property(e => e.Actiontypeid)
                    .HasColumnName("actiontypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.ToTable("Activity", "WORKFLOW");

                entity.Property(e => e.Activityid).HasColumnName("activityid");

                entity.Property(e => e.Activitytypeid).HasColumnName("activitytypeid");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Activitytype)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.Activitytypeid)
                    .HasConstraintName("fk_smsactivity_smsactivitytype");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.Processid)
                    .HasConstraintName("fk_smsactivity_smsprocess");
            });

            modelBuilder.Entity<Activitytarget>(entity =>
            {
                entity.ToTable("Activitytarget", "WORKFLOW");

                entity.Property(e => e.Activitytargetid).HasColumnName("activitytargetid");

                entity.Property(e => e.Activityid).HasColumnName("activityid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Roleid).HasColumnName("roleid");

                entity.Property(e => e.Targetid).HasColumnName("targetid");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.Activitytarget)
                    .HasForeignKey(d => d.Activityid)
                    .HasConstraintName("fk_smsactivitytarget_smsactivity");

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.Activitytarget)
                    .HasForeignKey(d => d.Targetid)
                    .HasConstraintName("fk_smsactivitytarget_smstargetid");
            });

            modelBuilder.Entity<Activitytype>(entity =>
            {
                entity.ToTable("Activitytype", "WORKFLOW");

                entity.Property(e => e.Activitytypeid)
                    .HasColumnName("activitytypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetGroups>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetRoleGroup>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.GroupId });

                entity.Property(e => e.RoleId).HasMaxLength(50);

                entity.Property(e => e.GroupId).HasMaxLength(50);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.AspNetRoleGroup)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetRoleGroup_AspNetGroups");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleGroup)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetRoleGroup_AspNetRoles");
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName)
                    .HasName("RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.UserId });

                entity.Property(e => e.GroupId).HasMaxLength(50);

                entity.Property(e => e.UserId).HasMaxLength(50);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.AspNetUserGroup)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetUserGroup_AspNetGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserGroup)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetUserGroup_AspNetUsers");
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasIndex(e => e.RoleId);

                entity.Property(e => e.UserId).HasMaxLength(50);

                entity.Property(e => e.RoleId).HasMaxLength(50);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail)
                    .HasName("EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName)
                    .HasName("UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsEnabled)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<AssetBorrow>(entity =>
            {
                entity.ToTable("asset_borrow");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.BorrowDate)
                    .HasColumnName("borrow_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.OrganizationId).HasColumnName("organization_id");

                entity.Property(e => e.RequestBorrowNo)
                    .HasColumnName("request_borrow_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate)
                    .HasColumnName("request_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.ReturnDate)
                    .HasColumnName("return_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetBorrow)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("FK_asset_borrow_assets");

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.AssetBorrow)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_asset_borrow_jabatan");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.AssetBorrow)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asset_borrow_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.AssetBorrow)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_asset_borrow_users");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.AssetBorrow)
                    .HasForeignKey(d => d.RoomId)
                    .HasConstraintName("FK_asset_borrow_office_rooms");
            });

            modelBuilder.Entity<AssetBrandSeries>(entity =>
            {
                entity.ToTable("asset_brand_series");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BrandId).HasColumnName("brand_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.AssetBrandSeries)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_brand_series_brand_id_foreign");
            });

            modelBuilder.Entity<AssetBrands>(entity =>
            {
                entity.ToTable("asset_brands");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<AssetMainGroupTypes>(entity =>
            {
                entity.ToTable("asset_main_group_types");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasColumnName("kode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<AssetRequestDetails>(entity =>
            {
                entity.ToTable("asset_request_details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.ActorId).HasColumnName("actor_id");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(255);

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Actor)
                    .WithMany(p => p.AssetRequestDetails)
                    .HasForeignKey(d => d.ActorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_request_details_actor_id_foreign");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.AssetRequestDetails)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_request_details_request_id_foreign");
            });

            modelBuilder.Entity<AssetRequests>(entity =>
            {
                entity.ToTable("asset_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssetConditionId).HasColumnName("asset_condition_id");

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.DepartementId).HasColumnName("departement_id");

                entity.Property(e => e.Depreciated).HasColumnName("depreciated");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeRoomId).HasColumnName("office_room_id");

                entity.Property(e => e.RegionalId).HasColumnName("regional_id");

                entity.Property(e => e.RequestChangeAt)
                    .HasColumnName("request_change_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestDate)
                    .HasColumnName("request_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("request_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.HasOne(d => d.AssetCondition)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.AssetConditionId)
                    .HasConstraintName("FK_asset_requests_jenis");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("asset_requests_asset_id_foreign");

                entity.HasOne(d => d.OfficeRoom)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.OfficeRoomId)
                    .HasConstraintName("asset_requests_office_room_id_foreign");

                entity.HasOne(d => d.Regional)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.RegionalId)
                    .HasConstraintName("FK_asset_requests_office_location_regions");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_asset_requests_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_requests_requester_id_foreign");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.AssetRequests)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_requests_type_id_foreign");
            });

            modelBuilder.Entity<AssetSubGroupTypes>(entity =>
            {
                entity.ToTable("asset_sub_group_types");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Kode)
                    .IsRequired()
                    .HasColumnName("kode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainGroupId).HasColumnName("main_group_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MainGroup)
                    .WithMany(p => p.AssetSubGroupTypes)
                    .HasForeignKey(d => d.MainGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("asset_sub_group_types_main_group_id_foreign");
            });

            modelBuilder.Entity<AssetTypes>(entity =>
            {
                entity.ToTable("asset_types");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Depreciation)
                    .HasColumnName("depreciation")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsagePeriod).HasColumnName("usage_period");
            });

            modelBuilder.Entity<Assets>(entity =>
            {
                entity.ToTable("assets");

                entity.HasIndex(e => e.AssetNumber)
                    .HasName("assets_asset_number_unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssetNumber)
                    .IsRequired()
                    .HasColumnName("asset_number")
                    .HasMaxLength(255);

                entity.Property(e => e.AssetOwnerId).HasColumnName("asset_owner_id");

                entity.Property(e => e.Barcode)
                    .HasColumnName("barcode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BrandSeriesId).HasColumnName("brand_series_id");

                entity.Property(e => e.CanBorrow)
                    .IsRequired()
                    .HasColumnName("can_borrow")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.GroupId).HasColumnName("group_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PriceAcquired)
                    .HasColumnName("price_acquired")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.RunningNumber).HasColumnName("running_number");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasColumnName("serial_number")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.VendorId).HasColumnName("vendor_id");

                entity.Property(e => e.YearAcquired).HasColumnName("year_acquired");

                entity.HasOne(d => d.AssetOwner)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.AssetOwnerId)
                    .HasConstraintName("FK_assets_jenis");

                entity.HasOne(d => d.BrandSeries)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.BrandSeriesId)
                    .HasConstraintName("FK_assets_asset_brand_series");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_assets_asset_sub_group_types");
            });

            modelBuilder.Entity<BorrowRequestDetails>(entity =>
            {
                entity.ToTable("borrow_request_details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.ActorId).HasColumnName("actor_id");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(255);

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Actor)
                    .WithMany(p => p.BorrowRequestDetails)
                    .HasForeignKey(d => d.ActorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("borrow_request_details_actor_id_foreign");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.BorrowRequestDetails)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("borrow_request_details_request_id_foreign");
            });

            modelBuilder.Entity<BorrowRequests>(entity =>
            {
                entity.ToTable("borrow_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actor)
                    .HasColumnName("actor")
                    .HasMaxLength(255);

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.Condition)
                    .HasColumnName("condition")
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.OrganizationId).HasColumnName("organization_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.RequiredAt)
                    .HasColumnName("required_at")
                    .HasColumnType("date");

                entity.Property(e => e.ReturnedAt)
                    .HasColumnName("returned_at")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.BorrowRequests)
                    .HasForeignKey(d => d.AssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("borrow_requests_asset_id_foreign");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.BorrowRequests)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("borrow_requests_requester_id_foreign");
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.ToTable("budget");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BudgetDesc)
                    .HasColumnName("budget_desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetName)
                    .HasColumnName("budget_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetNominal)
                    .HasColumnName("budget_nominal")
                    .HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<BudgetRole>(entity =>
            {
                entity.ToTable("budget_role");

                entity.HasIndex(e => new { e.BudgetId, e.RoleId })
                    .HasName("NonClusteredIndex-20190528-125208")
                    .IsUnique();

                entity.Property(e => e.BudgetRoleId).HasColumnName("budget_role_id");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.BudgetRole)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_budget_role_budget");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.BudgetRole)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_budget_role_AspNetRoles");
            });

            modelBuilder.Entity<CarBudgetDetail>(entity =>
            {
                entity.ToTable("car_budget_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.CarRequestBudgetId).HasColumnName("car_request_budget_id");

                entity.Property(e => e.CarRequestDetailStatusId).HasColumnName("car_request_detail_status_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.FileLocation)
                    .IsRequired()
                    .HasColumnName("file_location")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nominal)
                    .HasColumnName("nominal")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.CarBudgetDetail)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_car_budget_detail_jenis");

                entity.HasOne(d => d.CarRequestBudget)
                    .WithMany(p => p.CarBudgetDetail)
                    .HasForeignKey(d => d.CarRequestBudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_car_budget_detail_car_request_budget");

                entity.HasOne(d => d.CarRequestDetailStatus)
                    .WithMany(p => p.CarBudgetDetail)
                    .HasForeignKey(d => d.CarRequestDetailStatusId)
                    .HasConstraintName("FK_car_budget_detail_car_budget_detail_status");
            });

            modelBuilder.Entity<CarBudgetDetailStatus>(entity =>
            {
                entity.ToTable("car_budget_detail_status");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusValue).HasColumnName("statusValue");
            });

            modelBuilder.Entity<CarDrivers>(entity =>
            {
                entity.ToTable("car_drivers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("phone_number")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.CarDrivers)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("car_drivers_office_location_id_foreign");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CarDrivers)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("FK_car_drivers_users");
            });

            modelBuilder.Entity<CarPools>(entity =>
            {
                entity.ToTable("car_pools");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.LicensePlate)
                    .IsRequired()
                    .HasColumnName("license_plate")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.CarPools)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("car_pools_office_location_id_foreign");
            });

            modelBuilder.Entity<CarRequestBudget>(entity =>
            {
                entity.HasKey(e => e.CarRequestId);

                entity.ToTable("car_request_budget");

                entity.Property(e => e.CarRequestId)
                    .HasColumnName("car_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Balance)
                    .HasColumnName("balance")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CarRequestBudgetNo)
                    .HasColumnName("car_request_budget_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Checked).HasColumnName("checked");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DriverId).HasColumnName("driver_id");

                entity.Property(e => e.RequestEnd)
                    .HasColumnName("request_end")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequestStart)
                    .HasColumnName("request_start")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("transaction_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.CarRequest)
                    .WithOne(p => p.CarRequestBudget)
                    .HasForeignKey<CarRequestBudget>(d => d.CarRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_car_driver_request_budget_car_requests");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.CarRequestBudget)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_car_request_budget_car_drivers");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.CarRequestBudget)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_car_request_budget_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.CarRequestBudget)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_car_request_budget_users");
            });

            modelBuilder.Entity<CarRequestCoordinate>(entity =>
            {
                entity.ToTable("car_request_coordinate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CarCoordinateStatusId).HasColumnName("car_coordinate_status_id");

                entity.Property(e => e.CarRequestId).HasColumnName("car_request_id");

                entity.Property(e => e.CurrentDateTime)
                    .HasColumnName("current_date_time")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CarCoordinateStatus)
                    .WithMany(p => p.CarRequestCoordinate)
                    .HasForeignKey(d => d.CarCoordinateStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_car_request_coordinate_car_request_coordinate_status");

                entity.HasOne(d => d.CarRequest)
                    .WithMany(p => p.CarRequestCoordinate)
                    .HasForeignKey(d => d.CarRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_car_request_coordinate_car_requests");
            });

            modelBuilder.Entity<CarRequestCoordinateDetail>(entity =>
            {
                entity.ToTable("car_request_coordinate_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CarRequestCoordinateId).HasColumnName("car_request_coordinate_id");

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasColumnType("decimal(9, 6)");

                entity.Property(e => e.TransactionDateTime)
                    .HasColumnName("transaction_date_time")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CarRequestCoordinate)
                    .WithMany(p => p.CarRequestCoordinateDetail)
                    .HasForeignKey(d => d.CarRequestCoordinateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_car_request_coordinate_detail_car_request_coordinate");
            });

            modelBuilder.Entity<CarRequestCoordinateStatus>(entity =>
            {
                entity.ToTable("car_request_coordinate_status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasColumnName("color")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CarRequests>(entity =>
            {
                entity.ToTable("car_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetLeft)
                    .HasColumnName("budget_left")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CarPoolId).HasColumnName("car_pool_id");

                entity.Property(e => e.CarRequestNo)
                    .HasColumnName("car_request_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Destination)
                    .IsRequired()
                    .HasColumnName("destination")
                    .HasMaxLength(255);

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.FundAvailable)
                    .HasColumnName("fund_available")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasColumnName("no_account")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RegionalId).HasColumnName("regional_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.RequiredAt)
                    .HasColumnName("required_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsingDriver)
                    .IsRequired()
                    .HasColumnName("using_driver")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CarPool)
                    .WithMany(p => p.CarRequests)
                    .HasForeignKey(d => d.CarPoolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("car_requests_car_pool_id_foreign");

                entity.HasOne(d => d.Regional)
                    .WithMany(p => p.CarRequests)
                    .HasForeignKey(d => d.RegionalId)
                    .HasConstraintName("FK_car_requests_office_location_regions");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.CarRequests)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_car_requests_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.CarRequests)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("car_requests_requester_id_foreign");
            });

            modelBuilder.Entity<ChangeLog>(entity =>
            {
                entity.Property(e => e.ChangeLogDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ChangeLog)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ChangeLog_users");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.ToTable("image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Jabatan>(entity =>
            {
                entity.ToTable("jabatan");

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JabatanChild>(entity =>
            {
                entity.HasKey(e => new { e.JabatanChildId, e.ParentJabatanId });

                entity.ToTable("jabatan_child");

                entity.Property(e => e.JabatanChildId).HasColumnName("jabatan_child_id");

                entity.Property(e => e.ParentJabatanId).HasColumnName("parent_jabatan_id");

                entity.HasOne(d => d.JabatanChildNavigation)
                    .WithMany(p => p.JabatanChildJabatanChildNavigation)
                    .HasForeignKey(d => d.JabatanChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jabatan_child_jabatan");

                entity.HasOne(d => d.ParentJabatan)
                    .WithMany(p => p.JabatanChildParentJabatan)
                    .HasForeignKey(d => d.ParentJabatanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jabatan_child_jabatan1");
            });

            modelBuilder.Entity<Jenis>(entity =>
            {
                entity.ToTable("jenis");

                entity.Property(e => e.JenisId).HasColumnName("jenis_id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JenisDesc)
                    .HasColumnName("jenis_desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisNama)
                    .HasColumnName("jenis_nama")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JenisRole>(entity =>
            {
                entity.ToTable("jenis_role");

                entity.Property(e => e.JenisRoleId).HasColumnName("jenis_role_id");

                entity.Property(e => e.JenisId).HasColumnName("jenis_id");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Jenis)
                    .WithMany(p => p.JenisRole)
                    .HasForeignKey(d => d.JenisId)
                    .HasConstraintName("FK_jenis_role_jenis");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.JenisRole)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_jenis_role_AspNetRoles");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Logged).HasColumnType("datetime");

                entity.Property(e => e.Logger).HasMaxLength(250);

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Message).IsRequired();
            });

            modelBuilder.Entity<MeetingBudget>(entity =>
            {
                entity.ToTable("meeting_budget");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MeetingRequestAccountability>(entity =>
            {
                entity.ToTable("meeting_request_accountability");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.MeetingRequestId).HasColumnName("meeting_request_id");

                entity.Property(e => e.NumOfPartisipant).HasColumnName("num_of_partisipant");

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBudgetReal)
                    .HasColumnName("total_budget_real")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MeetingRequest)
                    .WithMany(p => p.MeetingRequestAccountability)
                    .HasForeignKey(d => d.MeetingRequestId)
                    .HasConstraintName("FK_meeting_request_accountability_meeting_requests");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.MeetingRequestAccountability)
                    .HasForeignKey(d => d.PicId)
                    .HasConstraintName("FK_meeting_request_account_users");
            });

            modelBuilder.Entity<MeetingRequestAccountabilityFiles>(entity =>
            {
                entity.ToTable("meeting_request_accountability_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MeetingRequestAccountabilityId).HasColumnName("meeting_request_accountability_id");

                entity.Property(e => e.UploadFiles)
                    .IsRequired()
                    .HasColumnName("upload_files")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.MeetingRequestAccountability)
                    .WithMany(p => p.MeetingRequestAccountabilityFiles)
                    .HasForeignKey(d => d.MeetingRequestAccountabilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_meeting_request_accountability_files_meeting_request_accountability");
            });

            modelBuilder.Entity<MeetingRequestAccountabilityFlow>(entity =>
            {
                entity.ToTable("meeting_request_accountability_flow");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MeetingRequestAccountabilityId).HasColumnName("meeting_request_accountability_id");

                entity.Property(e => e.RegionalId).HasColumnName("regional_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.HasOne(d => d.MeetingRequestAccountability)
                    .WithMany(p => p.MeetingRequestAccountabilityFlow)
                    .HasForeignKey(d => d.MeetingRequestAccountabilityId)
                    .HasConstraintName("FK_meeting_request_accountability_flow_meeting_request_accountability");

                entity.HasOne(d => d.Regional)
                    .WithMany(p => p.MeetingRequestAccountabilityFlow)
                    .HasForeignKey(d => d.RegionalId)
                    .HasConstraintName("FK_meeting_request_accountability_flow_office_location_regions");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.MeetingRequestAccountabilityFlow)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_meeting_request_accountability_flow_RequestFlow");
            });

            modelBuilder.Entity<MeetingRequestBudgets>(entity =>
            {
                entity.ToTable("meeting_request_budgets");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.MeetingBudgetId).HasColumnName("meeting_budget_id");

                entity.Property(e => e.MeetingRequestId).HasColumnName("meeting_request_id");

                entity.Property(e => e.QtyDays).HasColumnName("qty_days");

                entity.Property(e => e.QtyPerson).HasColumnName("qty_person");

                entity.Property(e => e.TotalAmount)
                    .HasColumnName("total_amount")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MeetingBudget)
                    .WithMany(p => p.MeetingRequestBudgets)
                    .HasForeignKey(d => d.MeetingBudgetId)
                    .HasConstraintName("FK_meeting_request_budgets_budget");

                entity.HasOne(d => d.MeetingRequest)
                    .WithMany(p => p.MeetingRequestBudgets)
                    .HasForeignKey(d => d.MeetingRequestId)
                    .HasConstraintName("FK_meeting_request_budgets_meeting_requests");
            });

            modelBuilder.Entity<MeetingRequestFlow>(entity =>
            {
                entity.ToTable("meeting_request_flow");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MeetingRequestId).HasColumnName("meeting_request_id");

                entity.Property(e => e.MeetingRoomId).HasColumnName("meeting_room_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.HasOne(d => d.MeetingRequest)
                    .WithMany(p => p.MeetingRequestFlow)
                    .HasForeignKey(d => d.MeetingRequestId)
                    .HasConstraintName("FK_meeting_request_flow_meeting_requests");

                entity.HasOne(d => d.MeetingRoom)
                    .WithMany(p => p.MeetingRequestFlow)
                    .HasForeignKey(d => d.MeetingRoomId)
                    .HasConstraintName("FK_meeting_request_flow_meeting_rooms");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.MeetingRequestFlow)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_meeting_request_flow_RequestFlow");
            });

            modelBuilder.Entity<MeetingRequestTime>(entity =>
            {
                entity.ToTable("meeting_request_time");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MeetingRequestId).HasColumnName("meeting_request_id");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MeetingRequest)
                    .WithMany(p => p.MeetingRequestTime)
                    .HasForeignKey(d => d.MeetingRequestId)
                    .HasConstraintName("FK_meeting_request_time_meeting_requests");
            });

            modelBuilder.Entity<MeetingRequests>(entity =>
            {
                entity.ToTable("meeting_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Approved).HasColumnName("approved");

                entity.Property(e => e.BudgetLeft)
                    .HasColumnName("budget_left")
                    .HasMaxLength(10);

                entity.Property(e => e.BudgetsId).HasColumnName("budgets_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.FundAvailable)
                    .HasColumnName("fund_available")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MeetingDesc)
                    .HasColumnName("meeting_desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingRequestNo)
                    .HasColumnName("meeting_request_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingRoomId).HasColumnName("meeting_room_id");

                entity.Property(e => e.MeetingTitle)
                    .HasColumnName("meeting_title")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingTypeId).HasColumnName("meeting_type_id");

                entity.Property(e => e.NoAkun)
                    .HasColumnName("no_akun")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumOfParticipant).HasColumnName("num_of_participant");

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusAnggaranId).HasColumnName("status_anggaran_id");

                entity.Property(e => e.TotalBudgetBook)
                    .HasColumnName("total_budget_book")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MeetingRoom)
                    .WithMany(p => p.MeetingRequests)
                    .HasForeignKey(d => d.MeetingRoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("meeting_requests_meeting_room_id_foreign");

                entity.HasOne(d => d.MeetingType)
                    .WithMany(p => p.MeetingRequests)
                    .HasForeignKey(d => d.MeetingTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_meeting_requests_jenis");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.MeetingRequests)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("meeting_requests_requester_id_foreign");
            });

            modelBuilder.Entity<MeetingRooms>(entity =>
            {
                entity.ToTable("meeting_rooms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.RoomCategoryId).HasColumnName("room_category_id");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.MeetingRooms)
                    .HasForeignKey(d => d.PicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("meeting_rooms_pic_id_foreign");

                entity.HasOne(d => d.RoomCategory)
                    .WithMany(p => p.MeetingRooms)
                    .HasForeignKey(d => d.RoomCategoryId)
                    .HasConstraintName("FK_meeting_rooms_meeting_rooms_category");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.MeetingRooms)
                    .HasForeignKey(d => d.RoomId)
                    .HasConstraintName("FK_meeting_rooms_office_rooms");
            });

            modelBuilder.Entity<MeetingRoomsCategory>(entity =>
            {
                entity.ToTable("meeting_rooms_category");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MaxPerson).HasColumnName("max_person");

                entity.Property(e => e.MinPerson).HasColumnName("min_person");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MeetingTypes>(entity =>
            {
                entity.ToTable("meeting_types");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OfficeLocationRegions>(entity =>
            {
                entity.ToTable("office_location_regions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficeLocationType>(entity =>
            {
                entity.ToTable("office_location_type");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficeLocations>(entity =>
            {
                entity.ToTable("office_locations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.LocationTypeId).HasColumnName("location_type_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.LocationType)
                    .WithMany(p => p.OfficeLocations)
                    .HasForeignKey(d => d.LocationTypeId)
                    .HasConstraintName("FK_office_locations_office_location_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.OfficeLocations)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_office_locations_office_location_regions");
            });

            modelBuilder.Entity<OfficeRooms>(entity =>
            {
                entity.ToTable("office_rooms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.OfficeRooms)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("office_rooms_office_location_id_foreign");
            });

            modelBuilder.Entity<OrderItem>(entity =>
            {
                entity.ToTable("order_item");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisId).HasColumnName("jenis_id");

                entity.Property(e => e.Merk)
                    .HasColumnName("merk")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasColumnName("role_id")
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNumber)
                    .HasColumnName("serial_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_item_budget");

                entity.HasOne(d => d.Jenis)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.JenisId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_item_jenis");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_item_AspNetRoles");
            });

            modelBuilder.Entity<OrderItemInventoryIt>(entity =>
            {
                entity.HasKey(e => e.OrderItemId);

                entity.ToTable("order_item_inventory_it");

                entity.Property(e => e.OrderItemId)
                    .HasColumnName("order_item_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemIt).HasColumnName("item_it");

                entity.HasOne(d => d.OrderItem)
                    .WithOne(p => p.OrderItemInventoryIt)
                    .HasForeignKey<OrderItemInventoryIt>(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_item_inventory_it_order_item");
            });

            modelBuilder.Entity<OrderItemStock>(entity =>
            {
                entity.HasKey(e => e.OrderItemId);

                entity.ToTable("order_item_stock");

                entity.Property(e => e.OrderItemId)
                    .HasColumnName("order_item_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Konv1ke2).HasColumnName("konv1ke2");

                entity.Property(e => e.MaxStock).HasColumnName("max_stock");

                entity.Property(e => e.MinStock).HasColumnName("min_stock");

                entity.Property(e => e.Satuan1)
                    .HasColumnName("satuan1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Satuan2)
                    .HasColumnName("satuan2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.OrderItem)
                    .WithOne(p => p.OrderItemStock)
                    .HasForeignKey<OrderItemStock>(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_item_stock_order_item");
            });

            modelBuilder.Entity<OrderReload>(entity =>
            {
                entity.ToTable("order_reload");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.BudgetLeft)
                    .HasColumnName("budget_left")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateAt)
                    .HasColumnName("create_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FundAvailable)
                    .HasColumnName("fund_available")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasColumnName("no_account")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.ReloadNo)
                    .HasColumnName("reload_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.RequiredAt)
                    .HasColumnName("required_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.OrderReload)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_order_reload_jabatan");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.OrderReload)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_reload_office_locations");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.OrderReload)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_order_reload_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.OrderReload)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_order_reload_users");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.OrderReload)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_order_reload_AspNetRoles");
            });

            modelBuilder.Entity<OrderReloadAccountability>(entity =>
            {
                entity.HasKey(e => e.OrderReloadId);

                entity.ToTable("order_reload_accountability");

                entity.Property(e => e.OrderReloadId)
                    .HasColumnName("order_reload_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountabilityDate)
                    .HasColumnName("accountability_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.OrderReload)
                    .WithOne(p => p.OrderReloadAccountability)
                    .HasForeignKey<OrderReloadAccountability>(d => d.OrderReloadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_reload_accountability_order_reload");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.OrderReloadAccountability)
                    .HasForeignKey(d => d.PicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_reload_accountability_users");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.OrderReloadAccountability)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_reload_accountability_RequestFlow");
            });

            modelBuilder.Entity<OrderReloadAccountabilityImage>(entity =>
            {
                entity.ToTable("order_reload_accountability_image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImageId).HasColumnName("image_id");

                entity.Property(e => e.OrderReloadId).HasColumnName("order_reload_id");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.OrderReloadAccountabilityImage)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("FK_order_reload_accountability_image_image");

                entity.HasOne(d => d.OrderReload)
                    .WithMany(p => p.OrderReloadAccountabilityImage)
                    .HasForeignKey(d => d.OrderReloadId)
                    .HasConstraintName("FK_order_reload_accountability_image_order_reload_accountability");
            });

            modelBuilder.Entity<OrderReloadDetail>(entity =>
            {
                entity.ToTable("order_reload_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.Property(e => e.OrderReloadId).HasColumnName("order_reload_id");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Qty2).HasColumnName("qty2");

                entity.Property(e => e.StockTransactionId).HasColumnName("stock_transaction_id");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.OrderReloadDetail)
                    .HasForeignKey(d => d.OrderItemId)
                    .HasConstraintName("FK_order_reload_detail_order_item");

                entity.HasOne(d => d.OrderReload)
                    .WithMany(p => p.OrderReloadDetail)
                    .HasForeignKey(d => d.OrderReloadId)
                    .HasConstraintName("FK_order_reload_detail_order_reload");

                entity.HasOne(d => d.StockTransaction)
                    .WithMany(p => p.OrderReloadDetail)
                    .HasForeignKey(d => d.StockTransactionId)
                    .HasConstraintName("FK_order_reload_detail_stock_transaction");
            });

            modelBuilder.Entity<OrderRequest>(entity =>
            {
                entity.ToTable("order_request");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.BudgetLeft)
                    .HasColumnName("budget_left")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateAt)
                    .HasColumnName("create_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FundAvailable)
                    .HasColumnName("fund_available")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasColumnName("no_account")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("request_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.RequiredAt)
                    .HasColumnName("required_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.OrderRequest)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_order_request_jabatan");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.OrderRequest)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_office_locations");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.OrderRequest)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.OrderRequest)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_order_request_users");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.OrderRequest)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_order_request_AspNetRoles");
            });

            modelBuilder.Entity<OrderRequestAccountability>(entity =>
            {
                entity.HasKey(e => e.OrderRequestId);

                entity.ToTable("order_request_accountability");

                entity.Property(e => e.OrderRequestId)
                    .HasColumnName("order_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountabilityDate)
                    .HasColumnName("accountability_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.OrderRequest)
                    .WithOne(p => p.OrderRequestAccountability)
                    .HasForeignKey<OrderRequestAccountability>(d => d.OrderRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_accountability_order_request");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.OrderRequestAccountability)
                    .HasForeignKey(d => d.PicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_accountability_users");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.OrderRequestAccountability)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_accountability_RequestFlow");
            });

            modelBuilder.Entity<OrderRequestAccountabilityImage>(entity =>
            {
                entity.ToTable("order_request_accountability_image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImageId).HasColumnName("image_id");

                entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.OrderRequestAccountabilityImage)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_accountability_image_image");

                entity.HasOne(d => d.OrderRequest)
                    .WithMany(p => p.OrderRequestAccountabilityImage)
                    .HasForeignKey(d => d.OrderRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_request_accountability_image_order_request_accountability");
            });

            modelBuilder.Entity<OrderRequestImage>(entity =>
            {
                entity.ToTable("order_request_image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImageId).HasColumnName("image_id");

                entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.OrderRequestImage)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("FK_order_request_image_image");

                entity.HasOne(d => d.OrderRequest)
                    .WithMany(p => p.OrderRequestImage)
                    .HasForeignKey(d => d.OrderRequestId)
                    .HasConstraintName("FK_order_request_image_order_request");
            });

            modelBuilder.Entity<OrderRequestsDetail>(entity =>
            {
                entity.HasKey(e => e.OrderRequestId);

                entity.ToTable("order_requests_detail");

                entity.Property(e => e.OrderRequestId)
                    .HasColumnName("order_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.Property(e => e.Qty)
                    .HasColumnName("qty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty2).HasColumnName("qty2");

                entity.Property(e => e.StockTransactionId).HasColumnName("stock_transaction_id");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.OrderRequestsDetail)
                    .HasForeignKey(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_requests_detail_order_item");

                entity.HasOne(d => d.OrderRequest)
                    .WithOne(p => p.OrderRequestsDetail)
                    .HasForeignKey<OrderRequestsDetail>(d => d.OrderRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_requests_detail_order_request");

                entity.HasOne(d => d.StockTransaction)
                    .WithMany(p => p.OrderRequestsDetail)
                    .HasForeignKey(d => d.StockTransactionId)
                    .HasConstraintName("FK_order_requests_detail_stock_transaction");
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.ToTable("Process", "WORKFLOW");

                entity.Property(e => e.Processid)
                    .HasColumnName("processid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Nama)
                    .HasColumnName("nama")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Processadmin>(entity =>
            {
                entity.HasKey(e => new { e.Procesid, e.Userid })
                    .HasName("PK_smsprocessadmin");

                entity.ToTable("Processadmin", "WORKFLOW");

                entity.Property(e => e.Procesid).HasColumnName("procesid");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Proces)
                    .WithMany(p => p.Processadmin)
                    .HasForeignKey(d => d.Procesid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smsprocessadmin_smsprocess");
            });

            modelBuilder.Entity<RepairItem>(entity =>
            {
                entity.ToTable("repair_item");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItItem).HasColumnName("it_item");

                entity.Property(e => e.JenisId).HasColumnName("jenis_id");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RepairType)
                    .HasColumnName("repair_type")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Jenis)
                    .WithMany(p => p.RepairItem)
                    .HasForeignKey(d => d.JenisId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_jenis");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.RepairItem)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_office_locations");
            });

            modelBuilder.Entity<RepairItemRequestAccountablitiyImage>(entity =>
            {
                entity.ToTable("repair_item_request_accountablitiy_image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RepairItemRequestId).HasColumnName("repair_item_request_id");

                entity.HasOne(d => d.RepairItemRequest)
                    .WithMany(p => p.RepairItemRequestAccountablitiyImage)
                    .HasForeignKey(d => d.RepairItemRequestId)
                    .HasConstraintName("FK_repair_item_request_accountablitiy_image_repair_item_request_accountablity");
            });

            modelBuilder.Entity<RepairItemRequestAccountablity>(entity =>
            {
                entity.HasKey(e => e.RepairItemRequestId);

                entity.ToTable("repair_item_request_accountablity");

                entity.Property(e => e.RepairItemRequestId)
                    .HasColumnName("repair_item_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.TotalBudgetReal)
                    .HasColumnName("total_budget_real")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.RepairItemRequestAccountablity)
                    .HasForeignKey(d => d.PicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_request_accountablity_users");

                entity.HasOne(d => d.RepairItemRequest)
                    .WithOne(p => p.RepairItemRequestAccountablity)
                    .HasForeignKey<RepairItemRequestAccountablity>(d => d.RepairItemRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_request_accountablity_repair_item_requests");
            });

            modelBuilder.Entity<RepairItemRequestImage>(entity =>
            {
                entity.ToTable("repair_item_request_image");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasColumnName("file_path")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RepairItemRequestId).HasColumnName("repair_item_request_id");

                entity.HasOne(d => d.RepairItemRequest)
                    .WithMany(p => p.RepairItemRequestImage)
                    .HasForeignKey(d => d.RepairItemRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_request_image_repair_item_requests");
            });

            modelBuilder.Entity<RepairItemRequests>(entity =>
            {
                entity.ToTable("repair_item_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.RepairItemId).HasColumnName("repair_item_id");

                entity.Property(e => e.RequestDate)
                    .HasColumnName("request_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("request_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.RepairItemRequests)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_repair_item_requests_jabatan");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.RepairItemRequests)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .HasConstraintName("FK_repair_item_requests_office_locations");

                entity.HasOne(d => d.RepairItem)
                    .WithMany(p => p.RepairItemRequests)
                    .HasForeignKey(d => d.RepairItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_repair_item_requests_repair_item");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RepairItemRequests)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_repair_item_requests_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.RepairItemRequests)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("repair_facility_requests_requester_id_foreign");
            });

            modelBuilder.Entity<RequestActionHistory>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Datetime)
                    .HasColumnName("datetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.HistoryType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RequestActionId).HasColumnName("requestActionId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.HasOne(d => d.RequestAction)
                    .WithMany(p => p.RequestActionHistory)
                    .HasForeignKey(d => d.RequestActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestActionHistory_Requestaction");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestActionHistory)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestActionHistory_RequestFlow");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RequestActionHistory)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestActionHistory_users");
            });

            modelBuilder.Entity<RequestFlow>(entity =>
            {
                entity.HasKey(e => e.Requestid)
                    .HasName("PK_smsrequest");

                entity.ToTable("RequestFlow", "WORKFLOW");

                entity.Property(e => e.Requestid).HasColumnName("requestid");

                entity.Property(e => e.Currentstateid).HasColumnName("currentstateid");

                entity.Property(e => e.Daterequest)
                    .HasColumnName("daterequest")
                    .HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currentstate)
                    .WithMany(p => p.RequestFlow)
                    .HasForeignKey(d => d.Currentstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smsrequest_smsstate");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.RequestFlow)
                    .HasForeignKey(d => d.Processid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smsrequest_smsprocess");
            });

            modelBuilder.Entity<RequestFlowUrl>(entity =>
            {
                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.RequestFlow)
                    .WithMany(p => p.RequestFlowUrl)
                    .HasForeignKey(d => d.RequestFlowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestFlowUrl_RequestFlow");
            });

            modelBuilder.Entity<Requestaction>(entity =>
            {
                entity.ToTable("Requestaction", "WORKFLOW");

                entity.Property(e => e.Requestactionid).HasColumnName("requestactionid");

                entity.Property(e => e.Actionid).HasColumnName("actionid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Requestid).HasColumnName("requestid");

                entity.Property(e => e.Transitionid).HasColumnName("transitionid");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.Requestaction)
                    .HasForeignKey(d => d.Actionid)
                    .HasConstraintName("fk_smsrequestaction_smsaction");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.Requestaction)
                    .HasForeignKey(d => d.Requestid)
                    .HasConstraintName("fk_smsrequestaction_smsrequest");

                entity.HasOne(d => d.Transition)
                    .WithMany(p => p.Requestaction)
                    .HasForeignKey(d => d.Transitionid)
                    .HasConstraintName("fk_smsrequestaction_smstransition_transitionid");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Requestaction)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("FK_Requestaction_users");
            });

            modelBuilder.Entity<Requestdata>(entity =>
            {
                entity.ToTable("Requestdata", "WORKFLOW");

                entity.Property(e => e.Requestdataid).HasColumnName("requestdataid");

                entity.Property(e => e.Nama)
                    .HasColumnName("nama")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Requestid).HasColumnName("requestid");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.Requestdata)
                    .HasForeignKey(d => d.Requestid)
                    .HasConstraintName("fk_smsrequestdata_smsrequest");
            });

            modelBuilder.Entity<Requestnote>(entity =>
            {
                entity.ToTable("Requestnote", "WORKFLOW");

                entity.Property(e => e.Requestnoteid).HasColumnName("requestnoteid");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Requestid).HasColumnName("requestid");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.Requestnote)
                    .HasForeignKey(d => d.Requestid)
                    .HasConstraintName("fk_smsrequestnote_smsrequest1");
            });

            modelBuilder.Entity<Requeststakeholder>(entity =>
            {
                entity.HasKey(e => new { e.Requestid, e.Userid })
                    .HasName("PK_smsrequeststakeholder");

                entity.ToTable("Requeststakeholder", "WORKFLOW");

                entity.Property(e => e.Requestid).HasColumnName("requestid");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.Requeststakeholder)
                    .HasForeignKey(d => d.Requestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smsrequeststakeholder_smsrequest");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State", "WORKFLOW");

                entity.Property(e => e.Stateid)
                    .HasColumnName("stateid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Statetypeid).HasColumnName("statetypeid");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.State)
                    .HasForeignKey(d => d.Processid)
                    .HasConstraintName("fk_smsstate_smsprocess");

                entity.HasOne(d => d.Statetype)
                    .WithMany(p => p.State)
                    .HasForeignKey(d => d.Statetypeid)
                    .HasConstraintName("fk_smsstate_smsstatetype");
            });

            modelBuilder.Entity<Statetype>(entity =>
            {
                entity.ToTable("Statetype", "WORKFLOW");

                entity.Property(e => e.Statetypeid)
                    .HasColumnName("statetypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.ToTable("Status", "WORKFLOW");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockTransaction>(entity =>
            {
                entity.ToTable("stock_transaction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.StockDate)
                    .HasColumnName("stock_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockId).HasColumnName("stock_id");

                entity.Property(e => e.StockTransactionStatusId).HasColumnName("stock_transaction_status_id");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.StockTransaction)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_stock_transaction_stocks");

                entity.HasOne(d => d.StockTransactionStatus)
                    .WithMany(p => p.StockTransaction)
                    .HasForeignKey(d => d.StockTransactionStatusId)
                    .HasConstraintName("FK_stock_transaction_stock_transaction_status");
            });

            modelBuilder.Entity<StockTransactionStatus>(entity =>
            {
                entity.ToTable("stock_transaction_status");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nominal).HasColumnName("nominal");
            });

            modelBuilder.Entity<Stocks>(entity =>
            {
                entity.ToTable("stocks");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.Stocks)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("order_stocks_office_location_id_foreign");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.Stocks)
                    .HasForeignKey(d => d.OrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_stocks_order_item");
            });

            modelBuilder.Entity<Target>(entity =>
            {
                entity.ToTable("Target", "WORKFLOW");

                entity.Property(e => e.Targetid).HasColumnName("targetid");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TargetUser>(entity =>
            {
                entity.ToTable("target_user");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TargetId).HasColumnName("target_id");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.TargetUser)
                    .HasForeignKey(d => d.TargetId)
                    .HasConstraintName("FK_target_user_Target");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TargetUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_target_user_AspNetUsers");
            });

            modelBuilder.Entity<Transition>(entity =>
            {
                entity.ToTable("Transition", "WORKFLOW");

                entity.Property(e => e.Transitionid).HasColumnName("transitionid");

                entity.Property(e => e.Currentstateid).HasColumnName("currentstateid");

                entity.Property(e => e.Flowtype)
                    .HasColumnName("flowtype")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nextstateid).HasColumnName("nextstateid");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.Projectid)
                    .HasColumnName("projectid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransitionEnd).HasColumnName("transitionEnd");

                entity.HasOne(d => d.Currentstate)
                    .WithMany(p => p.TransitionCurrentstate)
                    .HasForeignKey(d => d.Currentstateid)
                    .HasConstraintName("fk_smstransition_smsstate");

                entity.HasOne(d => d.Nextstate)
                    .WithMany(p => p.TransitionNextstate)
                    .HasForeignKey(d => d.Nextstateid)
                    .HasConstraintName("FK_Transition_State");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.Transition)
                    .HasForeignKey(d => d.Processid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smstransition_smsprocess");
            });

            modelBuilder.Entity<Transitionaction>(entity =>
            {
                entity.HasKey(e => e.Transitionid);

                entity.ToTable("Transitionaction", "WORKFLOW");

                entity.Property(e => e.Transitionid)
                    .HasColumnName("transitionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actonid).HasColumnName("actonid");

                entity.HasOne(d => d.Acton)
                    .WithMany(p => p.Transitionaction)
                    .HasForeignKey(d => d.Actonid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smstransitionaction_smsaction");

                entity.HasOne(d => d.Transition)
                    .WithOne(p => p.Transitionaction)
                    .HasForeignKey<Transitionaction>(d => d.Transitionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_smstransitionaction_smstransition");
            });

            modelBuilder.Entity<TravelCities>(entity =>
            {
                entity.ToTable("travel_cities");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<TravelHotel>(entity =>
            {
                entity.ToTable("travel_hotel");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TravelCitiesId).HasColumnName("travel_cities_id");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.TravelHotel)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_travel_hotel_budget");

                entity.HasOne(d => d.TravelCities)
                    .WithMany(p => p.TravelHotel)
                    .HasForeignKey(d => d.TravelCitiesId)
                    .HasConstraintName("FK_travel_hotel_travel_cities");
            });

            modelBuilder.Entity<TravelHotelRequests>(entity =>
            {
                entity.HasKey(e => e.TravelRequestId)
                    .HasName("PK__travel_h__3213E83FC969452C");

                entity.ToTable("travel_hotel_requests");

                entity.Property(e => e.TravelRequestId)
                    .HasColumnName("travel_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CheckinAt)
                    .HasColumnName("checkin_at")
                    .HasColumnType("date");

                entity.Property(e => e.CheckoutAt)
                    .HasColumnName("checkout_at")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath).HasColumnName("file_path");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomTotal).HasColumnName("room_total");

                entity.Property(e => e.TotalPrice)
                    .HasColumnName("total_price")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TravelCityId).HasColumnName("travel_city_id");

                entity.Property(e => e.TravelHotelId).HasColumnName("travel_hotel_id");

                entity.HasOne(d => d.TravelCity)
                    .WithMany(p => p.TravelHotelRequests)
                    .HasForeignKey(d => d.TravelCityId)
                    .HasConstraintName("FK_travel_hotel_requests_travel_cities");

                entity.HasOne(d => d.TravelHotel)
                    .WithMany(p => p.TravelHotelRequests)
                    .HasForeignKey(d => d.TravelHotelId)
                    .HasConstraintName("FK_travel_hotel_requests_travel_hotel");

                entity.HasOne(d => d.TravelRequest)
                    .WithOne(p => p.TravelHotelRequests)
                    .HasForeignKey<TravelHotelRequests>(d => d.TravelRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_travel_hotel_requests_travel_request");
            });

            modelBuilder.Entity<TravelOutbondCategory>(entity =>
            {
                entity.ToTable("travel_outbond_category");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TravelRequest>(entity =>
            {
                entity.ToTable("travel_request");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.BudgetLeft)
                    .HasColumnName("budget_left")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FundAvailable)
                    .HasColumnName("fund_available")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasColumnName("no_account")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoRequest)
                    .HasColumnName("no_request")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.RequestId).HasColumnName("request_id");

                entity.Property(e => e.RequesterId).HasColumnName("requester_id");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("total_budget")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("transaction_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.TravelRequest)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_travel_request_jabatan");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.TravelRequest)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .HasConstraintName("FK_travel_request_office_locations");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.TravelRequest)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_travel_request_RequestFlow");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.TravelRequest)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_travel_request_users");
            });

            modelBuilder.Entity<TravelRequestAccountability>(entity =>
            {
                entity.HasKey(e => e.TravelRequestId);

                entity.ToTable("travel_request_accountability");

                entity.Property(e => e.TravelRequestId)
                    .HasColumnName("travel_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeLocationId).HasColumnName("office_location_id");

                entity.Property(e => e.PicId).HasColumnName("pic_id");

                entity.Property(e => e.TotalAmountHotel)
                    .HasColumnName("total_amount_hotel")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalAmountTransportation)
                    .HasColumnName("total_amount_transportation")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("transaction_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.OfficeLocation)
                    .WithMany(p => p.TravelRequestAccountability)
                    .HasForeignKey(d => d.OfficeLocationId)
                    .HasConstraintName("FK_travel_request_accountability_office_locations");

                entity.HasOne(d => d.Pic)
                    .WithMany(p => p.TravelRequestAccountability)
                    .HasForeignKey(d => d.PicId)
                    .HasConstraintName("FK_travel_request_accountability_users");

                entity.HasOne(d => d.TravelRequest)
                    .WithOne(p => p.TravelRequestAccountability)
                    .HasForeignKey<TravelRequestAccountability>(d => d.TravelRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_travel_request_accountability_travel_request");
            });

            modelBuilder.Entity<TravelRequestAccountabilityFiles>(entity =>
            {
                entity.ToTable("travel_request_accountability_files");

                entity.Property(e => e.TravelRequestAccountabilityFilesId).HasColumnName("travel_request_accountability_files_id");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TravelRequestId).HasColumnName("travel_request_id");

                entity.HasOne(d => d.TravelRequest)
                    .WithMany(p => p.TravelRequestAccountabilityFiles)
                    .HasForeignKey(d => d.TravelRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_travel_request_accountability_files_travel_request_accountability");
            });

            modelBuilder.Entity<TravelTransportationName>(entity =>
            {
                entity.ToTable("travel_transportation_name");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BudgetId).HasColumnName("budget_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.TravelTypeId).HasColumnName("travel_type_id");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.TravelTransportationName)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_travel_transportation_name_budget");

                entity.HasOne(d => d.TravelType)
                    .WithMany(p => p.TravelTransportationName)
                    .HasForeignKey(d => d.TravelTypeId)
                    .HasConstraintName("FK_travel_transportation_name_travel_transportation_type");
            });

            modelBuilder.Entity<TravelTransportationRequestDetails>(entity =>
            {
                entity.ToTable("travel_transportation_request_details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ArrivalDateTime)
                    .HasColumnName("arrival_date_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartDateTime)
                    .HasColumnName("depart_date_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FromCity).HasColumnName("from_city");

                entity.Property(e => e.ToCity).HasColumnName("to_city");

                entity.Property(e => e.TotalBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TravelOutbondCategoryId).HasColumnName("travel_outbond_category_id");

                entity.Property(e => e.TravelTransportationNameId).HasColumnName("travel_transportation_name_id");

                entity.Property(e => e.TravelTransportatonIdRequestId).HasColumnName("travel_transportaton_id_request_id");

                entity.HasOne(d => d.FromCityNavigation)
                    .WithMany(p => p.TravelTransportationRequestDetailsFromCityNavigation)
                    .HasForeignKey(d => d.FromCity)
                    .HasConstraintName("FK_travel_transportation_request_details_travel_cities");

                entity.HasOne(d => d.ToCityNavigation)
                    .WithMany(p => p.TravelTransportationRequestDetailsToCityNavigation)
                    .HasForeignKey(d => d.ToCity)
                    .HasConstraintName("FK_travel_transportation_request_details_travel_cities1");

                entity.HasOne(d => d.TravelOutbondCategory)
                    .WithMany(p => p.TravelTransportationRequestDetails)
                    .HasForeignKey(d => d.TravelOutbondCategoryId)
                    .HasConstraintName("FK_travel_transportation_request_details_travel_outbond_category");

                entity.HasOne(d => d.TravelTransportationName)
                    .WithMany(p => p.TravelTransportationRequestDetails)
                    .HasForeignKey(d => d.TravelTransportationNameId)
                    .HasConstraintName("FK_travel_transportation_request_details_travel_transportation_name");

                entity.HasOne(d => d.TravelTransportatonIdRequest)
                    .WithMany(p => p.TravelTransportationRequestDetails)
                    .HasForeignKey(d => d.TravelTransportatonIdRequestId)
                    .HasConstraintName("FK_travel_transportation_request_details_travel_transportation_requests1");
            });

            modelBuilder.Entity<TravelTransportationRequests>(entity =>
            {
                entity.HasKey(e => e.TravelRequestId)
                    .HasName("PK__travel_f__3213E83FB5C8D748");

                entity.ToTable("travel_transportation_requests");

                entity.Property(e => e.TravelRequestId)
                    .HasColumnName("travel_request_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.PersonTotal).HasColumnName("person_total");

                entity.Property(e => e.TravelCitiesId).HasColumnName("travel_cities_id");

                entity.HasOne(d => d.TravelCities)
                    .WithMany(p => p.TravelTransportationRequests)
                    .HasForeignKey(d => d.TravelCitiesId)
                    .HasConstraintName("FK_travel_transportation_requests_travel_cities");

                entity.HasOne(d => d.TravelRequest)
                    .WithOne(p => p.TravelTransportationRequests)
                    .HasForeignKey<TravelTransportationRequests>(d => d.TravelRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_travel_transportation_requests_travel_request");
            });

            modelBuilder.Entity<TravelTransportationType>(entity =>
            {
                entity.ToTable("travel_transportation_type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.ToTable("users");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedAt)
                    .HasColumnName("deleted_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.DeviceId)
                    .HasColumnName("device_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JabatanId).HasColumnName("jabatan_id");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Jabatan)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.JabatanId)
                    .HasConstraintName("FK_users_jabatan");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_users_office_locations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_users_AspNetUsers");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}